---
title:  "Disk Scheduler | C++"
layout: post
---

I developed a concurrent program that issues and services disk requests, using mutexes and condition variables for synchronization. It consists of a servicer thread and multiple requester threads. Each requester thread synchronously issues requests for disk tracks and inserts them into a shared disk queue. The disk queue has a maximum capacity, so requester threads must wait if it is full. The servicer thread processes requests in Shortest Seek Time First order, and does not handle requests until the disk queue has the largest possible number of requests in order to minimize the average seek distance.